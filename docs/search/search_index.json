{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Venyx Venyx is a library which allows you to make clean and fresh GUIs in ROBLOX with ease. Source The source can be found on the Github repo Credits Dino - Creator Stefanuk12 - Forker Material Lua Team - Used their docuemtation as a template","title":"Home"},{"location":"#welcome-to-venyx","text":"Venyx is a library which allows you to make clean and fresh GUIs in ROBLOX with ease.","title":"Welcome to Venyx"},{"location":"#source","text":"The source can be found on the Github repo","title":"Source"},{"location":"#credits","text":"Dino - Creator Stefanuk12 - Forker Material Lua Team - Used their docuemtation as a template","title":"Credits"},{"location":"APIReference/","text":"API Reference Under this section, you will find all of the functions you will need to use Venyx to its full potential. It would be set under the following format: <return type> Function(<type> argument_name)","title":"Index"},{"location":"APIReference/#api-reference","text":"Under this section, you will find all of the functions you will need to use Venyx to its full potential. It would be set under the following format: <return type> Function(<type> argument_name)","title":"API Reference"},{"location":"APIReference/Page/","text":"Page A page can contain sections. A Page object has the following methods: Page:addSection Page:Resize","title":"Index"},{"location":"APIReference/Page/#page","text":"A page can contain sections. A Page object has the following methods: Page:addSection Page:Resize","title":"Page"},{"location":"APIReference/Page/addsection/","text":"Page:addSection <Section> Page:addSection(<table> options) Creates a Section. Parameters table options A table that configures the new Section Field Type Default Value Description title string Section The title of the Section Returns Section","title":"Add Section"},{"location":"APIReference/Page/addsection/#pageaddsection","text":"<Section> Page:addSection(<table> options) Creates a Section.","title":"Page:addSection"},{"location":"APIReference/Page/addsection/#parameters","text":"table options A table that configures the new Section Field Type Default Value Description title string Section The title of the Section","title":"Parameters"},{"location":"APIReference/Page/addsection/#returns","text":"Section","title":"Returns"},{"location":"APIReference/Page/resize/","text":"Page:Resize <nil> Page:Resize(<table> options) Resizes page based on contents AbsoluteSize (automatic). Parameters table options A table that configures the new Section Field Type Default Value Description scroll boolean Scroll to last canvas position Returns nil","title":"Resize"},{"location":"APIReference/Page/resize/#pageresize","text":"<nil> Page:Resize(<table> options) Resizes page based on contents AbsoluteSize (automatic).","title":"Page:Resize"},{"location":"APIReference/Page/resize/#parameters","text":"table options A table that configures the new Section Field Type Default Value Description scroll boolean Scroll to last canvas position","title":"Parameters"},{"location":"APIReference/Page/resize/#returns","text":"nil","title":"Returns"},{"location":"APIReference/Section/","text":"","title":"Index"},{"location":"APIReference/UI/","text":"UI An UI can contain pages. An UI object has the following methods: UI:addPage UI:Notify UI:SelectPage UI:SetTheme UI:Toggle","title":"Index"},{"location":"APIReference/UI/#ui","text":"An UI can contain pages. An UI object has the following methods: UI:addPage UI:Notify UI:SelectPage UI:SetTheme UI:Toggle","title":"UI"},{"location":"APIReference/UI/addpage/","text":"UI:addPage <Page> UI:addPage(<table> options) Creates a Page. Parameters table options A table that configures the new Page Field Type Default Value Description title string Page The title of the Page icon number The asset id of icon (optional) Returns Page","title":"Add Page"},{"location":"APIReference/UI/addpage/#uiaddpage","text":"<Page> UI:addPage(<table> options) Creates a Page.","title":"UI:addPage"},{"location":"APIReference/UI/addpage/#parameters","text":"table options A table that configures the new Page Field Type Default Value Description title string Page The title of the Page icon number The asset id of icon (optional)","title":"Parameters"},{"location":"APIReference/UI/addpage/#returns","text":"Page","title":"Returns"},{"location":"APIReference/UI/notify/","text":"UI:Notify <nil> UI:Notify(<table> options) Creates and displays a notification. Parameters table options A table that configures the new Notification Field Type Default Value Description title string Notification The title of the Notification context string nil text The description of the Notification callback function(<boolean> value) Called when the notification is accepted or cancelled. True/False Returns nil","title":"Notify"},{"location":"APIReference/UI/notify/#uinotify","text":"<nil> UI:Notify(<table> options) Creates and displays a notification.","title":"UI:Notify"},{"location":"APIReference/UI/notify/#parameters","text":"table options A table that configures the new Notification Field Type Default Value Description title string Notification The title of the Notification context string nil text The description of the Notification callback function(<boolean> value) Called when the notification is accepted or cancelled. True/False","title":"Parameters"},{"location":"APIReference/UI/notify/#returns","text":"nil","title":"Returns"},{"location":"APIReference/UI/selectpage/","text":"UI:SelectPage <nil> UI:SelectPage(<table> options) Selects a Page. Parameters table options A table that configures the page selection Field Type Default Value Description page Page The page you want to select toggle boolean Whether to show the page or not Returns nil","title":"Select Page"},{"location":"APIReference/UI/selectpage/#uiselectpage","text":"<nil> UI:SelectPage(<table> options) Selects a Page.","title":"UI:SelectPage"},{"location":"APIReference/UI/selectpage/#parameters","text":"table options A table that configures the page selection Field Type Default Value Description page Page The page you want to select toggle boolean Whether to show the page or not","title":"Parameters"},{"location":"APIReference/UI/selectpage/#returns","text":"nil","title":"Returns"},{"location":"APIReference/UI/settheme/","text":"UI:setTheme <nil> UI:setTheme(<table> options) Sets the UIs Colour Theme. ThemeType Theme Type is a string, you may choose from this table: Name Default Value (RGB) Description Background 24, 24, 24 The background of the UI Glow 0, 0, 0 The outer glow of the UI Accent 10, 10, 10 The accent colour of the UI LightContrast 20, 20, 20 The 'light' colour of the UI DarkContrast 14, 14, 14 The 'dark' colour of the UI TextColor 255, 255, 255 The text color Parameters table options A table that configures the theme Field Type Default Value Description theme ThemeType (see above) The page you want to select color Color3 Whether to show the page or not Returns nil","title":"Set Theme"},{"location":"APIReference/UI/settheme/#uisettheme","text":"<nil> UI:setTheme(<table> options) Sets the UIs Colour Theme.","title":"UI:setTheme"},{"location":"APIReference/UI/settheme/#themetype","text":"Theme Type is a string, you may choose from this table: Name Default Value (RGB) Description Background 24, 24, 24 The background of the UI Glow 0, 0, 0 The outer glow of the UI Accent 10, 10, 10 The accent colour of the UI LightContrast 20, 20, 20 The 'light' colour of the UI DarkContrast 14, 14, 14 The 'dark' colour of the UI TextColor 255, 255, 255 The text color","title":"ThemeType"},{"location":"APIReference/UI/settheme/#parameters","text":"table options A table that configures the theme Field Type Default Value Description theme ThemeType (see above) The page you want to select color Color3 Whether to show the page or not","title":"Parameters"},{"location":"APIReference/UI/settheme/#returns","text":"nil","title":"Returns"},{"location":"APIReference/UI/toggle/","text":"UI:SelectPage <nil> UI:toggle() Toggles the GUI on and off. Returns nil","title":"Toggle"},{"location":"APIReference/UI/toggle/#uiselectpage","text":"<nil> UI:toggle() Toggles the GUI on and off.","title":"UI:SelectPage"},{"location":"APIReference/UI/toggle/#returns","text":"nil","title":"Returns"},{"location":"APIReference/Venyx/","text":"Venyx All of the functions you can call directly from the loadstring are under this.","title":"Index"},{"location":"APIReference/Venyx/#venyx","text":"All of the functions you can call directly from the loadstring are under this.","title":"Venyx"},{"location":"APIReference/Venyx/new/","text":"Venyx.new <UI> Venyx.new(<table> options) Initialises the UI window. Parameters table options A table that configures the new UI Field Type Default Value Description title string Venyx The title of the UI Window Returns UI","title":"New"},{"location":"APIReference/Venyx/new/#venyxnew","text":"<UI> Venyx.new(<table> options) Initialises the UI window.","title":"Venyx.new"},{"location":"APIReference/Venyx/new/#parameters","text":"table options A table that configures the new UI Field Type Default Value Description title string Venyx The title of the UI Window","title":"Parameters"},{"location":"APIReference/Venyx/new/#returns","text":"UI","title":"Returns"},{"location":"Example/","text":"Example Here's an example which showcases all of the available UI elements: -- // Initialising the UI local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new({ title = \"Venyx\" }) -- // Themes local Themes = { Background = Color3.fromRGB(24, 24, 24), Glow = Color3.fromRGB(0, 0, 0), Accent = Color3.fromRGB(10, 10, 10), LightContrast = Color3.fromRGB(20, 20, 20), DarkContrast = Color3.fromRGB(14, 14, 14), TextColor = Color3.fromRGB(255, 255, 255) } -- // Test Page local Test = UI:addPage({ title = \"Test\", icon = 5012544693 }) -- // Sections for Test Page local SectionA = Test:addSection({ title = \"Section A\" }) local SectionB = Test:addSection({ title = \"Section B\" }) -- // Section A UI Elements SectionA:addToggle({ title = \"Toggle\", callback = function(value) print(\"Toggled\", value) end }) SectionA:addButton({ title = \"Button\", callback = function() print(\"Clicked\") end }) SectionA:addTextbox({ title = \"Notification\", default = \"Default\", callback = function(value, focusLost) print(\"Input\", value) if (focusLost) then UI:Notify(\"Title\", value) end end }) -- // Section B UI Elements SectionB:addKeybind({ title = \"Toggle Keybind\", key = Enum.KeyCode.One, callback = function() print(\"Activated Keybind\") UI:toggle() end, changedCallback = function(key) print(\"Changed Keybind\", key) end }) SectionB:addColorPicker({ title = \"ColorPicker\", default = Color3.fromRGB(50, 50, 50) }) SectionB:addColorPicker({ title = \"ColorPicker2\" }) SectionB:addSlider({ title = \"Slider\", default = 0, min = -100, max = 100, callback = function(value) print(\"Dragged\", value) end }) local dropdownContent = {\"Hello\", \"World\", \"Hello World\", \"Word\", 1, 2, 3} -- // To save me from keep on doing this SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent }) SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent, callback = function(text) print(\"Selected\", text) end }) SectionB:addButton({ title = \"Button\" }) -- // Color Theme Customisation Page local Theme = UI:addPage({ title = \"Theme\", icon = 5012544693 }) -- // Section for the Color Theme Customisation Page local Colors = Theme:addSection({ title = \"Colors\" }) -- // Adding a color picker for each type of theme customisable for theme, color in pairs(themes) do Colors:addColorPicker({ title = theme, default = color, callback = function(color3) UI:setTheme(theme, color3) end }) end -- // Load UI:SelectPage(UI.pages[1], true)","title":"Example"},{"location":"Example/#example","text":"Here's an example which showcases all of the available UI elements: -- // Initialising the UI local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new({ title = \"Venyx\" }) -- // Themes local Themes = { Background = Color3.fromRGB(24, 24, 24), Glow = Color3.fromRGB(0, 0, 0), Accent = Color3.fromRGB(10, 10, 10), LightContrast = Color3.fromRGB(20, 20, 20), DarkContrast = Color3.fromRGB(14, 14, 14), TextColor = Color3.fromRGB(255, 255, 255) } -- // Test Page local Test = UI:addPage({ title = \"Test\", icon = 5012544693 }) -- // Sections for Test Page local SectionA = Test:addSection({ title = \"Section A\" }) local SectionB = Test:addSection({ title = \"Section B\" }) -- // Section A UI Elements SectionA:addToggle({ title = \"Toggle\", callback = function(value) print(\"Toggled\", value) end }) SectionA:addButton({ title = \"Button\", callback = function() print(\"Clicked\") end }) SectionA:addTextbox({ title = \"Notification\", default = \"Default\", callback = function(value, focusLost) print(\"Input\", value) if (focusLost) then UI:Notify(\"Title\", value) end end }) -- // Section B UI Elements SectionB:addKeybind({ title = \"Toggle Keybind\", key = Enum.KeyCode.One, callback = function() print(\"Activated Keybind\") UI:toggle() end, changedCallback = function(key) print(\"Changed Keybind\", key) end }) SectionB:addColorPicker({ title = \"ColorPicker\", default = Color3.fromRGB(50, 50, 50) }) SectionB:addColorPicker({ title = \"ColorPicker2\" }) SectionB:addSlider({ title = \"Slider\", default = 0, min = -100, max = 100, callback = function(value) print(\"Dragged\", value) end }) local dropdownContent = {\"Hello\", \"World\", \"Hello World\", \"Word\", 1, 2, 3} -- // To save me from keep on doing this SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent }) SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent, callback = function(text) print(\"Selected\", text) end }) SectionB:addButton({ title = \"Button\" }) -- // Color Theme Customisation Page local Theme = UI:addPage({ title = \"Theme\", icon = 5012544693 }) -- // Section for the Color Theme Customisation Page local Colors = Theme:addSection({ title = \"Colors\" }) -- // Adding a color picker for each type of theme customisable for theme, color in pairs(themes) do Colors:addColorPicker({ title = theme, default = color, callback = function(color3) UI:setTheme(theme, color3) end }) end -- // Load UI:SelectPage(UI.pages[1], true)","title":"Example"},{"location":"GettingStarted/","text":"Getting Started Loading the Library Load the library from the Github repo using loadstring and game:HttpGet local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() Creating a new UI Create a new UI using the Venyx.new function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") Tip Store the result of Venyx.new() in a variable so you can add pages to it later Creating a Page A page allows you add sections to a new UI. Create a page using the UI:addPage function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") Tip Store the result of UI:addPage() in a variable so you can add sections to it later Creating a Section Then a section allows you to add UI elements to the section. Create a new section using the UI:addSection function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Tip Store the result of Page:addSection() in a variable so you can add UI elements to it later Creating UI Elements Now we can add UI elements by calling their corresponding methods. For example, if we want to add a button to the UI, we can call Section:addButton : local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Section:addButton({ title = \"Click Me!\", callback = function() print(\"Clicked!\") end }) Final Results If you did everything correctly, you should get a UI which looks like this: Clicking the button will output a message in the developer console: Tip Press F9 to open the developer console Read the API Reference section of this documentation to learn about the available UI element methods.","title":"Getting Started"},{"location":"GettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"GettingStarted/#loading-the-library","text":"Load the library from the Github repo using loadstring and game:HttpGet local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))()","title":"Loading the Library"},{"location":"GettingStarted/#creating-a-new-ui","text":"Create a new UI using the Venyx.new function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") Tip Store the result of Venyx.new() in a variable so you can add pages to it later","title":"Creating a new UI"},{"location":"GettingStarted/#creating-a-page","text":"A page allows you add sections to a new UI. Create a page using the UI:addPage function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") Tip Store the result of UI:addPage() in a variable so you can add sections to it later","title":"Creating a Page"},{"location":"GettingStarted/#creating-a-section","text":"Then a section allows you to add UI elements to the section. Create a new section using the UI:addSection function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Tip Store the result of Page:addSection() in a variable so you can add UI elements to it later","title":"Creating a Section"},{"location":"GettingStarted/#creating-ui-elements","text":"Now we can add UI elements by calling their corresponding methods. For example, if we want to add a button to the UI, we can call Section:addButton : local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Section:addButton({ title = \"Click Me!\", callback = function() print(\"Clicked!\") end })","title":"Creating UI Elements"},{"location":"GettingStarted/#final-results","text":"If you did everything correctly, you should get a UI which looks like this: Clicking the button will output a message in the developer console: Tip Press F9 to open the developer console Read the API Reference section of this documentation to learn about the available UI element methods.","title":"Final Results"}]}