{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"APIReference/","text":"","title":"API Reference"},{"location":"Example/","text":"Example Here's an example which showcases all of the available UI elements: -- // Initialising the UI local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Venyx\") -- // Themes local Themes = { Background = Color3.fromRGB(24, 24, 24), Glow = Color3.fromRGB(0, 0, 0), Accent = Color3.fromRGB(10, 10, 10), LightContrast = Color3.fromRGB(20, 20, 20), DarkContrast = Color3.fromRGB(14, 14, 14), TextColor = Color3.fromRGB(255, 255, 255) } -- // Test Page local Test = UI:addPage(\"Test\", 5012544693) -- // Sections for Test Page local SectionA = Test:addSection(\"Section A\") local SectionB = Test:addSection(\"Section B\") -- // Section A UI Elements SectionA:addToggle({ title = \"Toggle\", callback = function(value) print(\"Toggled\", value) end }) SectionA:addButton({ title = \"Button\", callback = function() print(\"Clicked\") end }) SectionA:addTextbox({ title = \"Notification\", default = \"Default\", callback = function(value, focusLost) print(\"Input\", value) if (focusLost) then UI:Notify(\"Title\", value) end end }) -- // Section B UI Elements SectionB:addKeybind({ title = \"Toggle Keybind\", key = Enum.KeyCode.One, callback = function() print(\"Activated Keybind\") UI:toggle() end, changedCallback = function(key) print(\"Changed Keybind\", key) end }) SectionB:addColorPicker({ title = \"ColorPicker\", default = Color3.fromRGB(50, 50, 50) }) SectionB:addColorPicker({ title = \"ColorPicker2\" }) SectionB:addSlider({ title = \"Slider\", default = 0, min = -100, max = 100, callback = function(value) print(\"Dragged\", value) end }) local dropdownContent = {\"Hello\", \"World\", \"Hello World\", \"Word\", 1, 2, 3} -- // To save me from keep on doing this SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent }) SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent, callback = function(text) print(\"Selected\", text) end }) SectionB:addButton({ title = \"Button\" }) -- // Color Theme Customisation Page local Theme = UI:addPage(\"Theme\", 5012544693) -- // Section for the Color Theme Customisation Page local Colors = Theme:addSection(\"Colors\") -- // Adding a color picker for each type of theme customisable for theme, color in pairs(themes) do Colors:addColorPicker({ title = theme, default = color, callback = function(color3) UI:setTheme(theme, color3) end }) end -- // Load UI:SelectPage(UI.pages[1], true)","title":"Example"},{"location":"Example/#example","text":"Here's an example which showcases all of the available UI elements: -- // Initialising the UI local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Venyx\") -- // Themes local Themes = { Background = Color3.fromRGB(24, 24, 24), Glow = Color3.fromRGB(0, 0, 0), Accent = Color3.fromRGB(10, 10, 10), LightContrast = Color3.fromRGB(20, 20, 20), DarkContrast = Color3.fromRGB(14, 14, 14), TextColor = Color3.fromRGB(255, 255, 255) } -- // Test Page local Test = UI:addPage(\"Test\", 5012544693) -- // Sections for Test Page local SectionA = Test:addSection(\"Section A\") local SectionB = Test:addSection(\"Section B\") -- // Section A UI Elements SectionA:addToggle({ title = \"Toggle\", callback = function(value) print(\"Toggled\", value) end }) SectionA:addButton({ title = \"Button\", callback = function() print(\"Clicked\") end }) SectionA:addTextbox({ title = \"Notification\", default = \"Default\", callback = function(value, focusLost) print(\"Input\", value) if (focusLost) then UI:Notify(\"Title\", value) end end }) -- // Section B UI Elements SectionB:addKeybind({ title = \"Toggle Keybind\", key = Enum.KeyCode.One, callback = function() print(\"Activated Keybind\") UI:toggle() end, changedCallback = function(key) print(\"Changed Keybind\", key) end }) SectionB:addColorPicker({ title = \"ColorPicker\", default = Color3.fromRGB(50, 50, 50) }) SectionB:addColorPicker({ title = \"ColorPicker2\" }) SectionB:addSlider({ title = \"Slider\", default = 0, min = -100, max = 100, callback = function(value) print(\"Dragged\", value) end }) local dropdownContent = {\"Hello\", \"World\", \"Hello World\", \"Word\", 1, 2, 3} -- // To save me from keep on doing this SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent }) SectionB:addDropdown({ title = \"Dropdown\", list = dropdownContent, callback = function(text) print(\"Selected\", text) end }) SectionB:addButton({ title = \"Button\" }) -- // Color Theme Customisation Page local Theme = UI:addPage(\"Theme\", 5012544693) -- // Section for the Color Theme Customisation Page local Colors = Theme:addSection(\"Colors\") -- // Adding a color picker for each type of theme customisable for theme, color in pairs(themes) do Colors:addColorPicker({ title = theme, default = color, callback = function(color3) UI:setTheme(theme, color3) end }) end -- // Load UI:SelectPage(UI.pages[1], true)","title":"Example"},{"location":"GettingStarted/","text":"Getting Started Loading the Library Load the library from the Github repo using loadstring and game:HttpGet local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() Creating a new UI Create a new UI using the Venyx.new function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") Tip Store the result of Venyx.new() in a variable so you can add pages to it later Creating a Page A page allows you add sections to a new UI. Create a page using the UI:addPage function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") Tip Store the result of UI:addPage() in a variable so you can add sections to it later Creating a Section Then a section allows you to add UI elements to the section. Create a new section using the UI:addSection function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Tip Store the result of Page:addSection() in a variable so you can add UI elements to it later Creating UI Elements Now we can add UI elements by calling their corresponding methods. For example, if we want to add a button to the UI, we can call Section:addButton : local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Section:addButton({ title = \"Click Me!\", callback = function() print(\"Clicked!\") end }) Final Results If you did everything correctly, you should get a UI which looks like this: Clicking the button will output a message in the developer console: Tip Press F9 to open the developer console Read the API Reference section of this documentation to learn about the available UI element methods.","title":"Getting Started"},{"location":"GettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"GettingStarted/#loading-the-library","text":"Load the library from the Github repo using loadstring and game:HttpGet local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))()","title":"Loading the Library"},{"location":"GettingStarted/#creating-a-new-ui","text":"Create a new UI using the Venyx.new function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") Tip Store the result of Venyx.new() in a variable so you can add pages to it later","title":"Creating a new UI"},{"location":"GettingStarted/#creating-a-page","text":"A page allows you add sections to a new UI. Create a page using the UI:addPage function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") Tip Store the result of UI:addPage() in a variable so you can add sections to it later","title":"Creating a Page"},{"location":"GettingStarted/#creating-a-section","text":"Then a section allows you to add UI elements to the section. Create a new section using the UI:addSection function: local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Tip Store the result of Page:addSection() in a variable so you can add UI elements to it later","title":"Creating a Section"},{"location":"GettingStarted/#creating-ui-elements","text":"Now we can add UI elements by calling their corresponding methods. For example, if we want to add a button to the UI, we can call Section:addButton : local Venyx = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source.lua\"))() local UI = Venyx.new(\"Getting Started\") local Page = UI:addPage(\"Main\") local Section = Page:addSection(\"Section\") Section:addButton({ title = \"Click Me!\", callback = function() print(\"Clicked!\") end })","title":"Creating UI Elements"},{"location":"GettingStarted/#final-results","text":"If you did everything correctly, you should get a UI which looks like this: Clicking the button will output a message in the developer console: Tip Press F9 to open the developer console Read the API Reference section of this documentation to learn about the available UI element methods.","title":"Final Results"},{"location":"Home/","text":"Welcome to Venyx Venyx is a library which allows you to make clean and fresh GUIs in ROBLOX with ease. Source The source can be found on the Github repo Credits Dino - Creator Stefanuk12 - Forker Material Lua Team - Used their docuemtation as a template","title":"Home"},{"location":"Home/#welcome-to-venyx","text":"Venyx is a library which allows you to make clean and fresh GUIs in ROBLOX with ease.","title":"Welcome to Venyx"},{"location":"Home/#source","text":"The source can be found on the Github repo","title":"Source"},{"location":"Home/#credits","text":"Dino - Creator Stefanuk12 - Forker Material Lua Team - Used their docuemtation as a template","title":"Credits"}]}